#version 330 core
out vec4 FragColor;
 
in VS_OUT 
{
	float FragHeight;
	vec3 FragPos;
	vec3 Normal;
	vec2 TexCoords;
	vec4 FragPosLightSpace;
} fs_in;
 
uniform sampler2D shadowMap;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform int receiveShadows;

float ShadowCalculation(vec4 fragPosLightSpace, float bias)
{
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(shadowMap, projCoords.xy).r; 
	float currentDepth = projCoords.z;
	
	float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
	if (currentDepth > 1.0)
        shadow = 0.0;

	return shadow;
}

void main()
{
	vec3 color = vec3(1, 1, 1);
	vec3 normal = normalize(fs_in.Normal);
	vec3 lightColor = vec3(0.3);
	
	vec3 ambient = 0.1 * color;
	
	vec3 lightDir = normalize(lightPos - fs_in.FragPos);
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * lightColor;
	
	vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
	vec3 specular = spec * lightColor;
	
	float bias = 0.0002;
	float shadow = ShadowCalculation(fs_in.FragPosLightSpace, bias);

	vec3 projCoords = fs_in.FragPosLightSpace.xyz / fs_in.FragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(shadowMap, projCoords.xy).r; 
	float currentDepth = projCoords.z;

	vec3 lighting = (ambient + (receiveShadows > 0.5 ? (1 - shadow) : 1) * (diffuse/* + specular*/)) * color;
	
	//FragColor = vec4(vec3(fs_in.FragHeight), 1.0);
	//FragColor = vec4(normal, 1);
	//FragColor = vec4(vec3(pow(shadow, 20)), 1.0);
	FragColor = vec4(lighting, 1.0);
}